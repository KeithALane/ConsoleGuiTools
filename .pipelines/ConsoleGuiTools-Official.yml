#################################################################################
#                               OneBranch Pipelines                             #
# This pipeline was created by EasyStart from a sample located at:              #
#   https://aka.ms/obpipelines/easystart/samples                                #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################

trigger: none

parameters:
- name: debug
  displayName: Enable debug output
  type: boolean
  default: false

variables:
  system.debug: ${{ parameters.debug }}
  BuildConfiguration: Release
  WindowsContainerImage: onebranch.azurecr.io/windows/ltsc2019/vse2022:latest
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false

resources:
  repositories:
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  # https://aka.ms/obpipelines/templates
  template: v2/OneBranch.Official.CrossPlat.yml@templates
  parameters:
    globalSdl: # https://aka.ms/obpipelines/sdl
      asyncSdl:
        enabled: true
        forStages: [build]
    stages:
    - stage: build
      jobs:
      - job: main
        displayName: Build package
        pool:
          type: windows
        variables:
          ob_outputDirectory: $(Build.SourcesDirectory)/module
        steps:
          - pwsh: |
              $data = Import-PowerShellDataFile -Path src/Microsoft.PowerShell.ConsoleGuiTools/Microsoft.PowerShell.ConsoleGuiTools.psd1
              Write-Output "##vso[task.setvariable variable=version;isOutput=true]$($data.ModuleVersion)"
            name: package
            displayName: Get version from project properties
          - task: onebranch.pipeline.version@1
            displayName: Set OneBranch version
            inputs:
              system: Custom
              customVersion: $(package.version)
          - task: UseDotNet@2
            displayName: Use .NET 6.x SDK
            inputs:
              packageType: sdk
              version: 6.x
          - task: PowerShell@2
            displayName: Install PSResources
            inputs:
              pwsh: true
              filePath: tools/installPSResources.ps1
          - pwsh: Invoke-Build -Configuration $(BuildConfiguration)
            displayName: Build
          - task: onebranch.pipeline.signing@1
            displayName: Sign 1st-party files
            inputs:
              command: sign
              signing_environment: external_distribution
              search_root: $(Build.SourcesDirectory)/module
              files_to_sign: |
                **/*.psd1;
                **/Microsoft.PowerShell.*.dll;
          - task: onebranch.pipeline.signing@1
            displayName: Sign 3rd-party files
            inputs:
              command: sign
              signing_environment: 135020002
              search_root: $(Build.SourcesDirectory)/module
              files_to_sign: |
                **/NStack.dll;
                **/Terminal.Gui.dll;
    - stage: release
      dependsOn: build
      variables:
        version: $[ stageDependencies.build.main.outputs['package.version'] ]
        drop: $(Pipeline.Workspace)/drop_build_main
      jobs:
      - job: github
        displayName: Publish draft to GitHub
        pool:
          type: windows
        variables:
          ob_outputDirectory: $(Build.SourcesDirectory)/out
        steps:
        - download: current
          displayName: Download artifacts
        - task: ArchiveFiles@2
          displayName: Zip signed artifacts
          inputs:
            rootFolderOrFile: $(drop)
            includeRootFolder: false
            archiveType: zip
            archiveFile: out/ConsoleGuiTools.zip
        - task: GitHubRelease@1
          displayName: Create GitHub release
          inputs:
            gitHubConnection: GitHub
            repositoryName: PowerShell/ConsoleGuiTools
            assets: out/ConsoleGuiTools.zip
            tagSource: userSpecifiedTag
            tag: v$(version)
            isDraft: true
            addChangeLog: false
            releaseNotesSource: inline
            releaseNotesInline: "<!-- TODO: Generate release notes on GitHub! -->"
      - job: validation
        displayName: Manual validation
        pool:
          type: agentless
        timeoutInMinutes: 1440
        steps:
        - task: ManualValidation@0
          displayName: Wait 24 hours for validation
          inputs:
            notifyUsers: $(Build.RequestedForEmail)
            instructions: Please validate the release and then publish it!
            timeoutInMinutes: 1440
        - pwsh: |
            Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
            Install-Module -Name Microsoft.PowerShell.PSResourceGet -AllowPrerelease -Scope CurrentUser -Force
            Import-Module -Name Microsoft.PowerShell.PSResourceGet -MinimumVersion 1.0.0
            Publish-PSResource -Path $(Pipeline.Workspace)/Publish/Microsoft.PowerShell.ConsoleGuiTools -Repository PSGallery -APIKey $(GalleryToken) -Verbose
          dependsOn: validation
          displayName: Publishing ConsoleGuiTools to PowerShell Gallery
